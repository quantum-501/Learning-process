1. 防抖与节流（https://juejin.cn/post/6844903795420299278#chapter-three）
2. 判断一个js对象（arr）是否是Array，最准确的方法：Object.prototype.toString.call(arr) === '[object Array]'
3. instanceof 是为了测试原型链元素是否存在
4. arr.filter()用于筛选出满足要求的数组元素，并返回新的数组，因此输出结果为[20,12]；.some()用于检测数组是否有满足条件的元素，只要元素满足要求返回true，否则false；.every()检测数组
   所有元素是否都满足条件，是返回true，否返回false；.map()会对数组中每个元素进行单独判断，返回true或false，作为新数组的元素，输出结果为[false, true, false, true, false]
   （https://blog.csdn.net/weixin_43814020/article/details/106678432）
5. NaN无论与谁比较，包括它自己，结果都是false 
6. promise遇到receive或reject情况，大多数情况下，回调函数then: 分别向doneList和failList中添加回调函数； always: 添加一个无论成功还是失败都会调用的回调函数
7. var x=y===true?”true”:”false”; ===表示同一类型变量的比较，将比较结果给x赋值； 赋值操作符（=）优先级小于三元操作符的优先级
8. event loop和 callback queue ： https://www.ruanyifeng.com/blog/2014/10/event-loop.html
9. let obj = { num1: 117 };let res = obj; obj.child = obj = { num2: 935 }连等赋值符（赋值操作先定义变量(从左到右)，再进行赋值（从右到左))
10. {} == {} ？为false，引用值的地址都不同,==值相同而数据类型不相同
11. dom2规定的事件流包括3个阶段：①事件捕获，②处于目标阶段（事件处理 ），③事件冒泡阶段。
12. hasOwnProperty：是用来判断一个对象是否有你给出名称的属性或对象。不过需要注意的是，此方法无法检查该对象的原型链中是否具有该属性，该属性必须是对象本身的一个成员。
13. in：会向原型链上查找; hasOwnProperty：属性是否在对象上，不从原型链上查找
14. 操作符之间优先级(高到低):算数 → 比较 → 布尔(逻辑)(逻辑与(&&)优先级高于逻辑或(||))→ “=”赋值符号; 判断 var a = 4 >= 6 || true && 1 || false；1）4 >= 6；2）true && 1
    原式变为 false || 1 || false（按正常顺序执行）3)false||1，结果是1（逻辑或的规则：第一个操作数是假值，则返回第二个操作数）4）1||false，结果1（逻辑:首个操符是真,返回首个操符）
15. 在jsx中，class是js关键字，要用classname代替class<div class=”msg-box”>{msg}</div>；直接写行内样式<style={{height: 50}}>时不能采用引号，而是style={{color:'red'}}的方式。
16. parseInt(string,raix)有两个参数//注意:string字符串只会被解析从第一个字符开始直到不是数字的字符部分;console.log(parseInt('22e3'))//22//当字符串中间存在非数字,就只解析前面数字的部分字符;
17. 不可事件冒泡:load,unload,abort(音频综止）resize，error，mouseenter，mouseleave,blur,focus,
18. 1 in [1]并不是表示数字1在不在数组里。而是表示数组中含不含有1这个索引index值;in操作符，对于数组属性需要指定数字形式的索引值来表示数组的属性名称表示1
19. 1&&2>1. 先判断2>1再判断&&
20. <button>点击</button> <script> var btn = document.querySelector('button');</script>执行以下程序,要求当用户点击按钮1秒后禁用按钮,以下选项的做法,不符合要求的()
    A.btn.onclick = function(){ var that = this; setTimeout(function(){that.disabled = true;},1000) }
    B.btn.onclick = function(){ setTimeout(function(){this.disabled = true;},1000) }
    C.btn.onclick = function(){ setTimeout(()=>{  this.disabled = true; },1000) }
    D.btn.onclick = function(){ setTimeout(function(){this.disabled = true;}.bind(this),1000) }
    B选项，在定时器中，this指向window对象，而不是btn对象。而在定时器的同级作用域，this指代btn对象，ACD选项均是在定时器函数中使用该btn对象; 
21. 使用new Function()创建函数对象时，其参数必须为字符串形式;全局函数调用时，this指向全局函数； 应该是指向调用全局函数的对象。
22. <div id=”info” style=”display:block”><p> 请填写 </p></div>
    document.innerHTML: 也就是从对象的起始位置到终止位置的全部内容,包括Html标签。上例中的test.innerHTML的值也就是“<span style="color:red">test1</span> test2 ”。
    document.innerText:从起始位置到终止位置的内容, 但它去除Html标签;上例中的text.innerTest的值也就是“test1 test2”, 其中span标签去除了。
    doc.outerHTML:除了包含innerHTML的全部内容外, 还包含对象标签本身;上例中的text.outerHTML的值也就是<div id="test"><span style="color:red">test1</span> test2</div>
23. 1 in Object(1.0).constructor; //false;  Number[1] = 123; 1 in Object(1.0).constructor; //true  因为number在object原型链上
24. continue语句只能用在while语句、do/while语句、for语句、或者for/in语句的循环体内，在其它地方使用都会引起错误！是停止当前语句，并从头执行该语句
    break的意思是跳出循环，也就是循环结束。
25.构造函数继承是每次继承都会把父类的所有属性方法全部拷贝一份，而对于公用的方法重复拷贝会浪费内存; 原型链继承所有对象都公用一份原型属性和方法，对一个类的修改回影响的其他类
   组合继承是结合两种继承方式，用构造函数方式继承属性，原型链方式继承方法 https://www.cnblogs.com/Leophen/p/11401734.html
26. AMD(推崇依赖前置)是 RequireJS 在推广过程中对模块定义的规范化产出，而CMD(依赖就近)是 SeaJS 在推广过程中对模块定义的规范化产出;
27. enum TYPE { OK, YES } // ts 有enum直接用 js先定义空对象再添加 & 在一个字符串枚举里，每个成员都必须用字符串字面量，或另外一个字符串枚举成员进行初始化
28. append(content)方法. 作用：向每个匹配的元素内部追加内容. 参数介绍：content (<Content>): 要追加到目标中的内容。
    appendTo(expr)方法. 作用：把所有匹配的元素追加到指定的元素元素集合中 参数介绍：expr (String): 用于匹配元素的jQuery表达式;append是大放小; appendtto是小放大
29. arr instanceof array; //false || 只有实例对象(var x=new A().do();)上不存在的属性和方法才会去原型上查找
30. NaA与任何不相等，测试返回的不是true或false的值 ｜｜ +作为一元运算符时，会将参数转换为数字返回，eg: +new Array(017) return NaN
31. for in循环是遍历对象上的每一个可枚举属性,包括原型链上面的可枚举属性,
32. obeject.keys()只是遍历自身的可枚举属性,不可以遍历原型链上的可枚举属性
33. console.log(undefined + 1);undefined+1的结果为NaN，而不是undefined;
34. 函数如果没有return语句，则默认return undefined；在严格模式下，函数不允许重名参数；
35. Browser 对象 有关的对象: history screen location Navigator
36. document.getElementById(“id”).setAttribute(“disabled”,”true”);document.getElementById(“id”).disabled=true;表示某属性id的html元素被禁用了
37. js常见的继承方式原型链继承、借用构造函数继承、组合继承、原型式继承、寄生式继承、寄生组合式继承，以及ES6新增的class继承，但不包括关联继承
38. 正则表达式exec()用于检索字符串中的正则表达式的匹配,匹配到返回正则，不到就是null,并且和match一样只匹配一次；test()方法返回是boolean类型
39. isNaN(1/0)返回的是false。但是isNaN(0/0)返回的就是true
40. 引用数据类型：存储在堆中的对象，存储在栈中的值是一个指针，指向 存储对象的内存地址， object属于引用数据类型,修改objecy内部属性不会改变数值
41. Xml一般用于传输和存储数据，是对html的补充，两者的目的不同；在JavaScript里解析和处理xml数据时，因为浏览器的不同，其做法也不同；在IE浏览器里处理xml，首先需要创建ActiveXObject对象
42.  for (i = 0; i < 3; i++) {      num[i] = function () {  //这代码相当于num.push(function(){console.log(i)}),会改变原数组
     console.log(i)} 上面代码函数function(){console.log(i)}没有被调用，此函数内部的代码不会被执行 
     } 如果函数里面没返回值，那么会返回一个函数
43.typeof判断引用类型数据number string boolean undefined object function 不有float，除了function以外都会判断成为object,function判断为Error;
44.Javascript和css没有display:visible属性和display:hidden属性；与Browser有关的对象: history screen location Navigator
45.JavaScript是专门为与网页交互而设计的,由三个不同的部分组成:ECMAScript核心语言功能,DOM(文档对象模型)访问和操作网页内容的方法和接口;BOM(浏览器对象模型)与浏览器交互的方法和接口
46.arrary.forEach(a,b)是循环遍历数组，虽然函数内部存在return语句，但当执行return时会退出一次迭代，然后继续下一次元素迭代，a为数组元素值，b为数组元素对应索引
47. 1&&2运算，如果前值为true,则结果为后值。如果前值为false,则值为前值;1||2运算，如果前值为true,则结果为前值,如果前值为false,则结果为后值。
48. get和post方法传递参数: get有长度限制并且会出现页面参数泄露在地址栏中的情况; url中参数用&连接
49. 正则表达式中：/[^]/表示非；/^/表示以...开头
50. 函数提升优先级高于变量提升，且不会被同名变量声明覆盖，但是会被变量赋值后覆盖；当局部变量和全局变量同时存在时，局部变量的优先级更高；
51. noscript表示脚本未执行时的替代，可以用来检测浏览器是否支持脚本，若不支持则显示noscript标签中的内容。此标签可被用于可以识别script标签但无法支持其中脚本的浏览器
52.js解析顺序：变量声明(foo#1) < 函数声明(foo#2) < 变量赋值(foo#3）｜｜ 数组长度会自动延长到最后一个被赋值的位置，中间没有被赋值的都为 undefined
53.new操作符原理 -创建一个新的空对象 ->将新对象隐式原型指向构造函数的显式原型 ->将构造函数this指向新对象后执行构造并给新对象添加属性和方法 ->判断构造函数返回值类型，如果是基本类型
   则返回创建的新对象，如果是引用类型，则返回这个引用类型值;
54.Object.defineProperty设置属性后,有属性描述符writable,configurable,enumberable默为false(暗示不遍历);而for..in..可把原型对象身的所有属性遍历出来;Object.keys()不能把原型对象非自身属性遍历出来
55.属性描述对象是JavaScript提供了一个内部数据结构,用来描述对象的属性,控制它的行为,含有六个属性：
   value：设置该属性的属性值，默为undefined; get：是个函数，表示该属性的取值函数（getter),默为undefined; set：是个函数，表示该属性的存值函数（setter），默为undefined
   writable：表示能否修改属性的值，也就是说该属性是可写的还是只读的，默认为true（可写）
   enumerable：表示改属性是否可遍历，默认为true（可遍历）； configurable：表示能否通过 delete 删除属性、能否修改属性的特性，或者将属性修改为访问器属性，默认为true（可配置）
56. className属性设置或返回元素class属性。获取属性值：HTMLElementObject.className,设置属性值：HTMLElementObject.className=classname；id属性设置或返回元素id。HTMLElementObject.id=id
    tagName属性返回元素标签名。HTML返回tagName属性的值是大写的；innerHTML属性设置或返回表格行的开始和结束标签之间的HTML。HTMLElementObject.innerHTML=text；
57.conutine可用于for,if,while语句中，表示跳出本次循环（break表示跳出循环，本次循环之后的都不执行） 
58. Ajax的优势：1.可搜索性 2.开放性 3.费用 4.易用性 5.易于开发。 劣势：可能破坏浏览器的后退功能；使用动态页面更新使得用户难于将某个特定的状态保存到收藏夹中，不过有相关方法解决  
    Flash的优势：1.多媒体处理 2.兼容性 3.矢量图形 4.客户端资源调度。劣势：1.二进制格式 2.格式私有 3.flash 文件经常会很大，用户第一次使用的时候需要忍耐较长的等待时间 4.性能问题
59. 一个数据结构具有Symbol.iterator属性，就可认为“可遍历的”（iterable）,原生具备Iterator结构接口如下:Array/Map/Set/String/TypedArray/函数arguments对象/NodeList对象
60. *：出现零到多次; +：出现一到多次; ?:出现零次或者一次; .: 除了\n以外的任意字符; {n}: 出现n次; {n,}: 出现n到多次; {n,m} : 出现n到m次
61. x++是属于后置型运算，优先级低，z=x++是先算z=x，最后x再执行自增;;++x先加再赋值; x++先赋值在++
62. Boolean([]); //true; Number([]); //0; Number({}); // NaN;Number(false); //0
63. console.log(([])?true:fasle);// => console.log((true)?true:false);console.log([]==false?true:false); // => console.log(0==0?true:false); 
    console.log(({}==false)?true:false); // => console.log((NaN==0)?true:false);
64. apply,call,bind区别：fn.apply(上下文环境，执行所需数组);fn.call(上下文环境，执行所需单个参数);fn.bind(上下文环境)
65. 阻止IE和各大浏览器默认行为：event.preventDefault()只可以阻止火狐谷歌，event.returnValue = false才能也阻止IE
65. Object.is()与===区别主要在NaN自身和+0与-0的判断。Object.is(NaN,NaN)返回true，而NaN===NaN的返回结果为false;Object.is(+0,-0)返回为false，而+0===-0的返回为true
66. 中文占2个字节(byte)中文里标点也占2个字节(byte),英文里的子母不分大小写，一个子母占1个字节,英文里的标点占1个字节. 1字节(byte)=8位(bits)
67. 实现在jQuery中通过远程HTTP的GET请求载入信息:  getScript()方法通过HTTP-GET请求载入并执行 JavaScript 文件;   $.get() 方法通过 HTTP GET 请求从服务器上请求数据;
    load() 方法从服务器加载数据，并把返回的数据放入被选元素中;  ajax() 方法通过 HTTP 请求加载远程数据;  $.ajax(opts);opts为json格式，常见参数url、type、data等
68. 运算方式:number +number =数值相加; number+string= 字符串拼接 如题：“2”+3=拼接      “23”+4=拼接
69. 对非数值会进行函数转换number() undefined undefined=0; null,null=0; boolean true=1 false=0;number原先的数值;string;object转为string 
70. Proxy 对象用于定义基本操作的自定义行为:对于代理模式主要体现在三个方面:1)拦截和监视外部对对象的访问,2)降低函数或类的复杂度,3)在复杂操作前对操作进行校验或对所需资源进行管理
71.使⽤ * 表示这是⼀个 Generator 函数;// 内部可以通过 yield 暂停代码 //通过调⽤ next 恢复执⾏
72. Number.isNaN("NaN");Number.isNaN(undefined);Number.isNaN({}); Number.isNaN("blabla")； // 都为false-字符串 "NaN" 不会被隐式转换成数字 NaN
    Number.isNaN() 不会自行将参数转换成数字，只有在参数是值为 NaN 的数字时，才会返回 true
73. 响应头设置cookie必须要设置withCredentials为true，同时标记Secure的Cookie只通过被HTTPS加密过的请求发送给服务端，因可预防{{Glossary（“ MitM”，“ man-in-the -middle“）}}
    攻击者的攻击；另外JavaScript {{domxref（“ Document.cookie”）}} API无法访问带有 HttpOnly 属性的cookie，此时只作用于服务器
 
