//// what is insertion sort algorithm?

//// The insertion sort algorithm maintains two subsets (often referred to as subsections or sublists) — a sorted subset, and an unsorted subset.

function insertionSort(array) {
    // Traverse through length of array, starting with the element at index 0.
    for (var i = 0; i < array.length; i++) {
        // Our current place in the unsorted portion of the array.
        // currentUnsortedItem is the item we will be moving into the "sorted" subset of our array.
        var currentUnsortedItem = array[i];
        console.log('currentUnsortedItem is currently ' + currentUnsortedItem);

        // Iterate through sorted items.
        // If the current unsorted item is smaller than the item to its left,
        // move the current item back one position in the array.
        // This loop will never run for the very first unsorted item at index 0.
        for (var j = i; j > 0 && currentUnsortedItem < array[j - 1]; j--) {
          console.log(currentUnsortedItem + ' < ' + array[j-1] + ' is ' + (currentUnsortedItem < array[j - 1]));

          // Shift item left in the sorted subset of the array.
          array[j] = array[j - 1];
          console.log('** inserting ' + array[j - 1] + ' at index ' + j);
        }

        // Shift item to the right in the sorted subset fo the array.
        array[j] = currentUnsortedItem;
        console.log('** inserting ' + currentUnsortedItem + ' at index ' + j);
        
        console.log('array is now: ' + array);
    }
    
    return array;
}
;
insertionSort([4, -31, 0, 99, 83, 1]);

> currentUnsortedItem is currently 4
> ** inserting 4 at index 0
> array is now: 4,-31,0,99,83,1
> currentUnsortedItem is currently -31
> -31 < 4 is true
> ** inserting 4 at index 1
> ** inserting -31 at index 0
> array is now: -31,4,0,99,83,1
> currentUnsortedItem is currently 0
> 0 < 4 is true
> ** inserting 4 at index 2
> ** inserting 0 at index 1
> array is now: -31,0,4,99,83,1
> currentUnsortedItem is currently 99
> ** inserting 99 at index 3
> array is now: -31,0,4,99,83,1
> currentUnsortedItem is currently 83
> 83 < 99 is true
> ** inserting 99 at index 4
> ** inserting 83 at index 3
> array is now: -31,0,4,83,99,1
> currentUnsortedItem is currently 1
> 1 < 99 is true
> ** inserting 99 at index 5
> 1 < 83 is true
> ** inserting 83 at index 4
> 1 < 4 is true
> ** inserting 4 at index 3
> ** inserting 1 at index 2
> array is now: -31,0,1,4,83,99

>> (6) [-31, 0, 1, 4, 83, 99]


//// what is mergesort algorithm?

function mergeSort(array) {
  // Determine the size of the input array.
  var arraySize = array.length;
 
  // If the array being passed in has only one element
  // within it, it is considered to be a sorted array.
  if (arraySize === 1) { 
    return; 
  }
 
  // If array contains more than one element,
  // split it into two parts (left and right arrays).
  var midpoint = Math.floor(arraySize / 2);
  var leftArray = array.slice(0, midpoint);
  var rightArray = array.slice(midpoint);
 
  // Recursively call mergeSort() on
  // leftArray and rightArray sublists.
  mergeSort(leftArray);
  mergeSort(rightArray);
  
  // After the mergeSort functions above finish executing,
  // merge the sorted leftArray and rightArray together.
  merge(leftArray, rightArray, array);
  
  // Return the fully sorted array.
  return array;
}

function merge(leftArray, rightArray, array) {
  var index = 0;
 
  while (leftArray.length && rightArray.length) {
    console.log('array is: ', array);
    if (rightArray[0] < leftArray[0]) {
      array[index++] = rightArray.shift();
    } else {
      array[index++] = leftArray.shift();
    }
  }
  
  while (leftArray.length) {
    console.log('left array is: ', leftArray);
    array[index++] = leftArray.shift();
  }
  
  while (rightArray.length) {
    console.log('right array is: ', rightArray);
    array[index++] = rightArray.shift();
  }
  
  console.log('** end of merge function ** array is: ', array);
}
mergeSort([5, 1, 7, 3, 2, 8, 6, 4]);

> array is:  (2) [5, 1]
> left array is:  [5]
> ** end of merge function ** array is:  (2) [1, 5]
> array is:  (2) [7, 3]
> left array is:  [7]
> ** end of merge function ** array is:  (2) [3, 7]
> array is:  (4) [5, 1, 7, 3]
> array is:  (4) [1, 1, 7, 3]
> array is:  (4) [1, 3, 7, 3]
> right array is:  [7]
> ** end of merge function ** array is:  (4) [1, 3, 5, 7]
> array is:  (2) [2, 8]
> right array is:  [8]
> ** end of merge function ** array is:  (2) [2, 8]
> array is:  (2) [6, 4]
> left array is:  [6]
> ** end of merge function ** array is:  (2) [4, 6]
> array is:  (4) [2, 8, 6, 4]
> array is:  (4) [2, 8, 6, 4]
> array is:  (4) [2, 4, 6, 4]
> left array is:  [8]
> ** end of merge function ** array is:  (4) [2, 4, 6, 8]
> array is:  (8) [5, 1, 7, 3, 2, 8, 6, 4]
> array is:  (8) [1, 1, 7, 3, 2, 8, 6, 4]
> array is:  (8) [1, 2, 7, 3, 2, 8, 6, 4]
> array is:  (8) [1, 2, 3, 3, 2, 8, 6, 4]
> array is:  (8) [1, 2, 3, 4, 2, 8, 6, 4]
> array is:  (8) [1, 2, 3, 4, 5, 8, 6, 4]
> array is:  (8) [1, 2, 3, 4, 5, 6, 6, 4]
> right array is:  [8]
> ** end of merge function ** array is:  (8) [1, 2, 3, 4, 5, 6, 7, 8]
>> (8) [1, 2, 3, 4, 5, 6, 7, 8]> 

// alteration at selection sorting
//Kth Smallest Element in a Sorted Matrix
//Given an n x n matrix where each of the rows and columns is sorted in ascending order, return the kth smallest element in the matrix
var kthSmallest = function(matrix, k) {
    var string = [];
    for(let i=0;i<matrix.length;i++){
        console.log(matrix[i]);
        for(let j=0; j<matrix[i].length;j++){
        let small = j;
        if(matrix[i][j].length <= 1) return;
        if(matrix[i][j+1] < matrix[i][small]){
            let current = matrix[i][small];
            matrix[i][small] = matrix[i][j+1];
            matrix[i][j+1] = current;
            console.log('swapping '+ matrix[i][small]);
        }
        string.push(matrix[i][small]);
            
}
        string.sort((a,b)=> a - b);
}
    return string[k-1];
}


////what is two pointer?

const numsArray = [1, 3, 7, 9, 2];
const targetToFind = 11;

const findTwoSum = function(nums, target) {
  for(let p1 = 0; p1 < nums.length; p1++) {
    
    const numberToFind = target - nums[p1];

    for(let p2 = p1 + 1; p2 < nums.length; p2++) {
      if(numberToFind === nums[p2]) {
        return [p1, p2];
      }
    }
  }

  return null;
};

console.log(findTwoSum(numsArray, targetToFind));


////Optimizing two pointers and updation

const numsArray = [1,3,7,9,2];
const targetToFind = 11;

const findTwoSum = function(nums, target) {
  const numsMap = {};
  
  for(let p = 0; p < nums.length; p++) {
    const currentMapVal = numsMap[nums[p]];

    if(currentMapVal >= 0) {
      return [currentMapVal, p];
    } else {
      const numberToFind = target - nums[p];
      numsMap[numberToFind] = p;
    }
  }

  return null;
}

console.log(findTwoSum(numsArray, targetToFind));



Problem ：You are given an integer array height of length n. There are n vertical lines drawn such that 
the two endpoints of the ith line are (i, 0) and (i, height[i]).

For example: const heightsArray = [4,8,1,2,3,9];

//one of two pointers is moving to the end while another pointer is moving to the front.

const getMaxWaterContainer = function(heights) {
  let p1 = 0, p2 = heights.length - 1, maxArea = 0;

  while(p1 < p2) {
    const height = Math.min(heights[p1], heights[p2]);
    const width = p2 - p1;
    const area = height * width;
    maxArea = Math.max(maxArea, area);
    
    if(heights[p1] <= heights[p2]) {
      p1++;
    } else {
      p2--;
    }
  }

  return maxArea;
}

//one of two pointers is moving to the end while another pointer is moving to the front. Both of pointers are at the middle of array.

const getMaxWaterContainer = function(heights) {
  let p1 = Math.floor(heights.length/2);
  let p2 = p1 + 1
  let maxArea = 0;

  while(p1>0  && p2 < heights.length) {
    const height = Math.min(heights[p1], heights[p2]);
    const width = p2 - p1;
    const area = height * width;
    maxArea = Math.max(maxArea, area);
    console.log(area);
    
    if(heights[p1] <= heights[p2]) {
      p1--;
    } else {
      p2++;
    }
  }
  return maxArea;
}

//Two pointers are moving one by one;

const getMaxWaterContainer = function(heights) {
  let maxArea = 0;

  for(let p1 = 0; p1 < heights.length; p1++) {
    for(let p2 = p1 + 1; p2 < heights.length; p2++) {
      const height = Math.min(heights[p1], heights[p2]);
      const width = p2 - p1;
      const area = height * width;
      maxArea = Math.max(maxArea, area);
    }
  };

  return maxArea;
}

console.log(getMaxWaterContainer(heightsArray));

//slide window
const string = "au"

const lengthOfLongestSubstring = function(s) {
    if(s.length <= 1) return s.length;
    
    const seen = {};
    let left = 0, longest = 0;
    
    for(let right = 0; right < s.length; right++) {
        const currentChar = s[right];
        const previouslySeenChar = seen[currentChar];
        
        if(previouslySeenChar >= left) {
          left = previouslySeenChar + 1;
        }
        
        seen[currentChar] = right;
        
        longest = Math.max(longest, right - left + 1);
    }
    
    return longest;
};

console.log(lengthOfLongestSubstring(string));


//hash table solution

const findTwoSum = function(nums, target) {
  const numsMap = {};
  
  for(let p = 0; p < nums.length; p++) {
    const currentMapVal = numsMap[nums[p]];

    if(currentMapVal >= 0) {
      return [currentMapVal, p];
    } else {
      const numberToFind = target - nums[p];
      numsMap[numberToFind] = p;
    }
  }

  return null;
}

console.log(findTwoSum(numsArray, targetToFind));



//3sum 
nums = [-1,0,1,2,-1,-4];

var threeSum = function(nums) {
    nums.sort((a, b) => a - b);
    const result = [];
    
    for(let i = 0; i < nums.length; i++) {
        let low = i+1, high = nums.length-1, sum = 0;
        
        while(low < high) {
            sum = nums[i] + nums[low] + nums[high];
            
            if(sum === 0) {
                result.push([nums[i], nums[low], nums[high]]);
                while(nums[low+1] === nums[low]) low++;
                while(nums[high-1] === nums[high]) high--;
                low++;
                high--;
            } else if(sum < 0) low++;
            else high--;
        }
        while(nums[i+1] === nums[i]) i++;
    }
    return result;    
};

//Election sorting

var thSmallest = function(matrix, k) {

    var string = [];

    for(let i=0;i<matrix.length;i++){
        console.log(matrix[i]);
        for(let j=0; j<matrix[i].length;j++){
        let small = j;
        if(matrix[i][j].length <= 1) return;
        if(matrix[i][j+1] < matrix[i][small]){

            let current = matrix[i][small];
            matrix[i][small] = matrix[i][j+1];
            matrix[i][j+1] = current;
            console.log('swapping '+ matrix[i][small]);
        }
        console.log('number '+matrix[i][small]);
        
        string.push(matrix[i][small]);
        console.log(string);
        
}
}
console.log(string[k-1]);
//return string[k-1];
};
/*
[[1,2],[1,3]]
2
*/
 thSmallest([[1,2],[1,3]],2);

// binary search
function binarySearch(items, value){

    var startIndex  = 0,
        stopIndex   = items.length - 1,
        middle      = Math.floor((stopIndex + startIndex)/2);

    while(items[middle] != value && startIndex < stopIndex){

        //adjust search area
        if (value < items[middle]){
            stopIndex = middle - 1;
        } else if (value > items[middle]){
            startIndex = middle + 1;
        }

        //recalculate middle
        middle = Math.floor((stopIndex + startIndex)/2);
    }

    //make sure it's the right value
    return (items[middle] != value) ? -1 : middle;
}


// instance of binary search 
var search = function(nums, target) {
    if (nums.length === 0) return -1; // check empty

  let left = 0;
  let right = nums.length - 1;

  while (left <= right) {
    const mid = left + Math.floor((right - left) / 2);

    if (nums[mid] === target) return mid;

    // left sorted
    if (nums[left] <= nums[mid]) {
      // check if is in the left sorted part
      if (nums[left] <= target && target < nums[mid]) {
        right = mid - 1;
      } else {
        left = mid + 1;
      }
    // right sorted
    } else {
      // check if is in the right sorted part
      if (nums[mid] < target && target <= nums[right]) {
        left = mid + 1;
      } else {
        right = mid - 1;
      }
    }
  }

  return -1;
};

// Find All Anagrams in a String
//（Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order

var findAnagrams = function(s, p) {
    /*
     // method one
    let j = 0, t;
    let array =[], empty={};
    if(s.length < p.length) return;
    
    p.split("").map(c => empty[c] = empty[c]? empty[c]+1:1);
    
    while(j<s.length){
        let i = j+p.length-1;
        t = s.split("").slice(j,i);
        t.find(c => empty[c] = empty[c]?array.push(t[0]): j = p.length - c );
    }
      return array;
    */
    
    // method two
     let result = [];
  if (p.length > s.length) return undefined;
  
  let left = 0;
  let right = p.length;
  
  while(left < s.length) {
    let tmp = s.substr(left,right);
    if ( tmp.split('').sort().join('') === p.split('').sort().join('')){
      result.push(left);
    }
    left++;
    //right++;
  }
  return result;
  
  // method three
   let l = 0, r = 0;
    let m = new Map();
    for (let letter of p) m.set(letter, m.get(letter)+1 || 1);
    let counter = m.size, res = [];
    while (r < s.length) {
        let letter = s[r];
        if (m.has(letter)) m.set(letter, m.get(letter)-1);
        if (m.get(letter) == 0) counter--;
        
        while (counter == 0) {
            if (r-l+1 == p.length) res.push(l);
            if (m.has(s[l])) m.set(s[l],m.get(s[l])+1);
            if (m.get(s[l]) > 0) counter++;
            l++;
        }
        r++;
    }
    return res;
 };
 
// Ransom Note
// Given two strings ransomNote and magazine, return true if ransomNote can be constructed from magazine and false otherwise.
//  Each letter in magazine can only be used once in ransomNote
 var canConstruct = function(ransomNote, magazine) {
    var map={};
    for(let letter of magazine){
        if(!map[letter]){
            map[letter]=0;
        }
        map[letter]++;
    }
    for(let letter of ransomNote){
        if(!map[letter]){
           return false;
        }
        map[letter]--;
    }
    return true
};

//Search in Rotated Sorted Array
//There is an integer array nums sorted in ascending order (with distinct values).

var search = function(nums, target) {
    if (nums.length === 0) return -1; // check empty

  let left = 0;
  let right = nums.length - 1;

  while (left <= right) {
    const mid = left + Math.floor((right - left) / 2);

    if (nums[mid] === target) return mid;

    // left sorted
    if (nums[left] <= nums[mid]) {
      
      // check if is in the left sorted part
      if (nums[left] <= target && target < nums[mid]) {
        right = mid - 1;
      } else {
        left = mid + 1;
      }
   
    // right sorted
    } else {
      // check if is in the right sorted part
      if (nums[mid] < target && target <= nums[right]) {
        left = mid + 1;
      } else {
        right = mid - 1;
      }
    }
  }

  return -1;
};


//Linked List Cycle

var hasCycle = function(head) {
    if(!head) {
        return false;
    }
    let hare = head;
    let tortoise = head;
    while(hare) {
        if(!hare.next) {
            return false;
        } else {
            hare = hare.next.next;
            tortoise = tortoise.next;
        }
        if(tortoise == hare) {
            return true;
        }
    }
    return false;

};

//Remove Nth Node From End of List

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
var removeNthFromEnd = function(head, n) {
    /*
    let prev = null,i=0;
    let current = head;
    if((current === null)&&(n<0)){
      return prev;
    }
    
    if(current.length - n === 0){
      return current.next;
    }
    
    while((current !== null)&&(i< current.length - n)){
        prev = current;
        current = current.next;
        i++;
     }
    
    if(current !== null){
        prev.next = current.next;
        return prev;
    }
    */
    let fast = head, slow = head
    for (let i = 0; i < n; i++) fast = fast.next
    if (!fast) return head.next
    while (fast.next) fast = fast.next, slow = slow.next
    slow.next = slow.next.next
    return head
};

//Implement Stack using Queues

var MyStack = function() {
    this.inQueue = [];
    this.outQueue = [];
};

/**
 * Push element x onto stack. 
 * @param {number} x
 * @return {void}
 */
MyStack.prototype.push = function(x) {
    this.inQueue.push(x);  
};

/**
 * Removes the element on top of the stack and returns that element.
 * @return {number}
 */
MyStack.prototype.pop = function() {
    while(this.inQueue.length > 1){
        this.outQueue.push(this.inQueue.shift());
    }
    
    const lastItem = this.inQueue.shift();
    
    [this.inQueue, this.outQueue] = [this.outQueue, this.inQueue];
    
    return lastItem;
};

/**
 * Get the top element.
 * @return {number}
 */
MyStack.prototype.top = function() {
    while(this.inQueue.length > 1){
        this.outQueue.push(this.inQueue.shift());
    }
    // peak
    const lastItem = this.inQueue[0];
    
    this.outQueue.push(this.inQueue.shift());
    [this.inQueue, this.outQueue] = [this.outQueue, this.inQueue];
    
    return lastItem;
};

/**
 * Returns whether the stack is empty.
 * @return {boolean}
 */
MyStack.prototype.empty = function() {
    return this.inQueue.length === 0;
};

/** 
 * Your MyStack object will be instantiated and called as such:
 * var obj = new MyStack()
 * obj.push(x)
 * var param_2 = obj.pop()
 * var param_3 = obj.top()
 * var param_4 = obj.empty()
 */
 
 
// Maximum Depth of Binary Tree

var maxDepth = function(root) {
    // accurate answering
    if(!root) return null;
    return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;
    
    // answer written by me (wrong)
    /*
    let i = 0;
    if(root === null)   return i;
    }else{
        if(root.left !== null) { 
            maxDepth(root.left);
        }
        
        if(root.right !== null){
            maxDepth(root.right);
        }
        i++;
    }
    return i++;
    */
    
};

//traversalBFS(adjacencyList)；
//bread-first search

const adjacencyList = [
  [1, 3],
  [0],
  [3, 8],
  [0, 2, 4, 5],
  [3, 6],
  [3],
  [4, 7],
  [6],
  [2]
];
const traversalBFS = function(graph) {
  const seen = {};
  const queue = [0];
  const values = [];

  while(queue.length) {
    const vertex = queue.shift();
    
    values.push(vertex);
    seen[vertex] = true;

    const connections = graph[vertex];
    for(let i = 0; i < connections.length; i++) {
      const connection = connections[i];
      if(!seen[connection]) {
        queue.push(connection);
      }
    }
  }

  return values;
}


